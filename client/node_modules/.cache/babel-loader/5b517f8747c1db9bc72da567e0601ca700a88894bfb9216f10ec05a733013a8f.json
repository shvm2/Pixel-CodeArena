{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Pixel-CodeArena\\\\client\\\\src\\\\components\\\\Workspace\\\\Workspace.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Split from \"react-split\";\nimport { toast } from \"react-toastify\";\nimport ProblemDescription from \"./ProblemDescription\";\nimport CodeEditor from \"./CodeEditor\";\nimport TestCases from \"./TestCases\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Workspace() {\n  _s();\n  const urlPathname = window.location.pathname;\n  const segments = urlPathname.split(\"/\");\n  const problemId = segments[segments.length - 1];\n  const [details, setDetails] = useState({});\n  const [code, setCode] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const [output, setOutput] = useState(\"\");\n  const testcases = details.testcases;\n  useEffect(() => {\n    async function fetchDetails() {\n      try {\n        const response = await axios.get(`http://localhost:6001/problem/${problemId}`);\n        setDetails(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchDetails();\n  }, [problemId]);\n  const onChange = data => {\n    setCode(data);\n  };\n  const handleCompile = () => {\n    setProcessing(true);\n    try {\n      var _testcases$, _testcases$2;\n      // Ensure the code being evaluated is a function that can take input and return output\n\n      const input = (_testcases$ = testcases[0]) === null || _testcases$ === void 0 ? void 0 : _testcases$.input; // Assumes input is provided in the format needed\n      const expectedOutput = (_testcases$2 = testcases[0]) === null || _testcases$2 === void 0 ? void 0 : _testcases$2.output;\n      const [numsPart, targetPart] = input.split(',').map(part => part.trim());\n      const nums = JSON.parse(numsPart.split('=')[1].trim());\n      const nums2 = parseInt(targetPart.split('=')[1].trim(), 10);\n\n      // Run the user's function with the input\n\n      const target = nums2;\n      function twoSum(nums, target) {\n        const map = new Map();\n        for (let i = 0; i < nums.length; i++) {\n          const complement = target - nums[i];\n          if (map.has(complement)) {\n            return [map.get(complement), i];\n          }\n          map.set(nums[i], i);\n        }\n        return [];\n      }\n      const userFunction = new Function('nums', 'target', `\n        // Add your code here (e.g., the twoSum function body)\n        // const map = new Map();\n        // for (let i = 0; i < nums.length; i++) {\n        //   const complement = target - nums[i];\n        //   if (map.has(complement)) {\n        //     return [map.get(complement), i];\n        //   }\n        //   map.set(nums[i], i);\n        // }\n        // return [];\n        ${code}\n      `);\n\n      // Define a test case input\n      // This is the target sum\n      const result = userFunction(input, target);\n\n      // Compare result with expected output\n      let resultString;\n      if (Array.isArray(result)) {\n        resultString = result.join(',');\n      } else if (typeof result === 'string') {\n        resultString = result;\n      } else {\n        resultString = JSON.stringify(result);\n      }\n\n      // Compare result with expected output\n      if (resultString.trim() === expectedOutput.trim()) {\n        toast.success(\"Congrats! Test Case Passed\");\n        setOutput(resultString);\n      } else {\n        toast.error(\"Oops! Output Didn't Match\");\n        console.log(result);\n        setOutput(resultString);\n      }\n    } catch (error) {\n      console.error(\"Error during evaluation:\", error);\n      toast.error(\"Error during evaluation. Check console for details.\");\n    } finally {\n      setProcessing(false); // Stop processing after evaluation\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Split, {\n    className: \"split\",\n    minSize: 0,\n    children: [/*#__PURE__*/_jsxDEV(ProblemDescription, {\n      details: details\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Split, {\n      className: \"split-vertical\",\n      direction: \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TestCases, {\n        handleCompile: handleCompile,\n        testcases: testcases,\n        processing: processing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-tab\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(Workspace, \"0MCgvzdOIeR6FNB2sxsaM3YaOUM=\");\n_c = Workspace;\nexport default Workspace;\nvar _c;\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"names":["React","useState","useEffect","axios","Split","toast","ProblemDescription","CodeEditor","TestCases","jsxDEV","_jsxDEV","Workspace","_s","urlPathname","window","location","pathname","segments","split","problemId","length","details","setDetails","code","setCode","processing","setProcessing","output","setOutput","testcases","fetchDetails","response","get","data","error","console","log","onChange","handleCompile","_testcases$","_testcases$2","input","expectedOutput","numsPart","targetPart","map","part","trim","nums","JSON","parse","nums2","parseInt","target","twoSum","Map","i","complement","has","set","userFunction","Function","result","resultString","Array","isArray","join","stringify","success","className","minSize","children","fileName","_jsxFileName","lineNumber","columnNumber","direction","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Pixel-CodeArena/client/src/components/Workspace/Workspace.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Split from \"react-split\";\r\nimport { toast } from \"react-toastify\";\r\nimport ProblemDescription from \"./ProblemDescription\";\r\nimport CodeEditor from \"./CodeEditor\";\r\nimport TestCases from \"./TestCases\";\r\n\r\nfunction Workspace() {\r\n  const urlPathname = window.location.pathname;\r\n  const segments = urlPathname.split(\"/\");\r\n  const problemId = segments[segments.length - 1];\r\n\r\n  const [details, setDetails] = useState({});\r\n  const [code, setCode] = useState(\"\");\r\n  const [processing, setProcessing] = useState(false);\r\n  const [output, setOutput] = useState(\"\");\r\n  const testcases = details.testcases;\r\n\r\n  useEffect(() => {\r\n    async function fetchDetails() {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:6001/problem/${problemId}`\r\n        );\r\n        setDetails(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchDetails();\r\n  }, [problemId]);\r\n\r\n  const onChange = (data) => {\r\n    setCode(data);\r\n  };\r\n\r\n  const handleCompile = () => {\r\n    setProcessing(true);\r\n    \r\n    try {\r\n      // Ensure the code being evaluated is a function that can take input and return output\r\n      \r\n      const input = testcases[0]?.input; // Assumes input is provided in the format needed\r\n      const expectedOutput = testcases[0]?.output;\r\n     \r\n      const [numsPart, targetPart] = input.split(',').map(part => part.trim());\r\n  const nums = JSON.parse(numsPart.split('=')[1].trim());\r\n  const nums2 = parseInt(targetPart.split('=')[1].trim(), 10);\r\n\r\n      // Run the user's function with the input\r\n   \r\n\r\n      const target = nums2; \r\n\r\n      function twoSum(nums, target) {\r\n        const map = new Map();\r\n        for (let i = 0; i < nums.length; i++) {\r\n          const complement = target - nums[i];\r\n          if (map.has(complement)) {\r\n            return [map.get(complement), i];\r\n          }\r\n          map.set(nums[i], i);\r\n        }\r\n        return [];\r\n      }\r\n           \r\n      \r\n      \r\n      const userFunction = new Function('nums', 'target', `\r\n        // Add your code here (e.g., the twoSum function body)\r\n        // const map = new Map();\r\n        // for (let i = 0; i < nums.length; i++) {\r\n        //   const complement = target - nums[i];\r\n        //   if (map.has(complement)) {\r\n        //     return [map.get(complement), i];\r\n        //   }\r\n        //   map.set(nums[i], i);\r\n        // }\r\n        // return [];\r\n        ${code}\r\n      `);\r\n      \r\n      // Define a test case input\r\n     // This is the target sum\r\n      const result = userFunction(input,target);\r\n\r\n      // Compare result with expected output\r\n      let resultString;\r\n      if (Array.isArray(result)) {\r\n        resultString = result.join(',');\r\n      } else if (typeof result === 'string') {\r\n        resultString = result;\r\n      } else {\r\n        resultString = JSON.stringify(result);\r\n      }\r\n  \r\n      // Compare result with expected output\r\n      if (resultString.trim() === expectedOutput.trim()) {\r\n        toast.success(\"Congrats! Test Case Passed\");\r\n        setOutput(resultString);\r\n      } else {\r\n        toast.error(\"Oops! Output Didn't Match\");\r\n        console.log(result);\r\n        setOutput(resultString);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during evaluation:\", error);\r\n      toast.error(\"Error during evaluation. Check console for details.\");\r\n    } finally {\r\n      setProcessing(false); // Stop processing after evaluation\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Split className=\"split\" minSize={0}>\r\n      <ProblemDescription details={details} />\r\n      <Split className=\"split-vertical\" direction=\"vertical\">\r\n        <CodeEditor onChange={onChange} />\r\n        <TestCases\r\n          handleCompile={handleCompile}\r\n          testcases={testcases}\r\n          processing={processing}\r\n        />\r\n        <div className=\"output-tab\">\r\n          <h3>Output</h3>\r\n          <pre>{output}</pre>\r\n        </div>\r\n      </Split>\r\n    </Split>\r\n  );\r\n}\r\n\r\nexport default Workspace;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}