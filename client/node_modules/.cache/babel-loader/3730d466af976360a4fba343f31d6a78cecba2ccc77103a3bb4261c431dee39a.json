{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Pixel-CodeArena\\\\client\\\\src\\\\components\\\\Workspace\\\\Workspace.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Split from \"react-split\";\nimport { toast } from \"react-toastify\";\nimport ProblemDescription from \"./ProblemDescription\";\nimport CodeEditor from \"./CodeEditor\";\nimport TestCases from \"./TestCases\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Workspace() {\n  _s();\n  const urlPathname = window.location.pathname;\n  const segments = urlPathname.split(\"/\");\n  const problemId = segments[segments.length - 1];\n  const [details, setDetails] = useState({});\n  const [code, setCode] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const testcases = details.testcases;\n  useEffect(() => {\n    async function fetchDetails() {\n      try {\n        const response = await axios.get(`http://localhost:6001/problem/${problemId}`);\n        setDetails(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchDetails();\n  }, [problemId]);\n  const onChange = data => {\n    setCode(data);\n  };\n  const handleCompile = () => {\n    setProcessing(true);\n    try {\n      var _testcases$, _testcases$2;\n      // Ensure the code being evaluated is a function that can take input and return output\n      const userFunction = new Function('nums', 'target', `\n        // Add the code to solve the problem here\n        ${code}\n      `);\n\n      // Define a test case input\n      const input = (_testcases$ = testcases[0]) === null || _testcases$ === void 0 ? void 0 : _testcases$.input; // Assumes input is provided in the format needed\n      const expectedOutput = (_testcases$2 = testcases[0]) === null || _testcases$2 === void 0 ? void 0 : _testcases$2.output;\n\n      // Run the user's function with the input\n      const result = userFunction(input);\n\n      // Compare result with expected output\n      if (JSON.stringify(result).trim() === JSON.stringify(expectedOutput).trim()) {\n        toast.success(\"Congrats! Test Case Passed\");\n      } else {\n        toast.error(\"Oops! Output Didn't Match\");\n      }\n    } catch (error) {\n      console.error(\"Error during evaluation:\", error);\n      toast.error(\"Error during evaluation. Check console for details.\");\n    } finally {\n      setProcessing(false); // Stop processing after evaluation\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Split, {\n    className: \"split\",\n    minSize: 0,\n    children: [/*#__PURE__*/_jsxDEV(ProblemDescription, {\n      details: details\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Split, {\n      className: \"split-vertical\",\n      direction: \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TestCases, {\n        handleCompile: handleCompile,\n        testcases: testcases,\n        processing: processing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(Workspace, \"/q0+25LJ5j7Ia7bjqUfdWBlw00o=\");\n_c = Workspace;\nexport default Workspace;\nvar _c;\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"names":["React","useState","useEffect","axios","Split","toast","ProblemDescription","CodeEditor","TestCases","jsxDEV","_jsxDEV","Workspace","_s","urlPathname","window","location","pathname","segments","split","problemId","length","details","setDetails","code","setCode","processing","setProcessing","testcases","fetchDetails","response","get","data","error","console","log","onChange","handleCompile","_testcases$","_testcases$2","userFunction","Function","input","expectedOutput","output","result","JSON","stringify","trim","success","className","minSize","children","fileName","_jsxFileName","lineNumber","columnNumber","direction","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Pixel-CodeArena/client/src/components/Workspace/Workspace.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Split from \"react-split\";\r\nimport { toast } from \"react-toastify\";\r\nimport ProblemDescription from \"./ProblemDescription\";\r\nimport CodeEditor from \"./CodeEditor\";\r\nimport TestCases from \"./TestCases\";\r\n\r\nfunction Workspace() {\r\n  const urlPathname = window.location.pathname;\r\n  const segments = urlPathname.split(\"/\");\r\n  const problemId = segments[segments.length - 1];\r\n\r\n  const [details, setDetails] = useState({});\r\n  const [code, setCode] = useState(\"\");\r\n  const [processing, setProcessing] = useState(false);\r\n\r\n  const testcases = details.testcases;\r\n\r\n  useEffect(() => {\r\n    async function fetchDetails() {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:6001/problem/${problemId}`\r\n        );\r\n        setDetails(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchDetails();\r\n  }, [problemId]);\r\n\r\n  const onChange = (data) => {\r\n    setCode(data);\r\n  };\r\n\r\n  const handleCompile = () => {\r\n    setProcessing(true);\r\n    \r\n    try {\r\n      // Ensure the code being evaluated is a function that can take input and return output\r\n      const userFunction = new Function('nums', 'target', `\r\n        // Add the code to solve the problem here\r\n        ${code}\r\n      `);\r\n      \r\n      // Define a test case input\r\n      const input = testcases[0]?.input; // Assumes input is provided in the format needed\r\n      const expectedOutput = testcases[0]?.output;\r\n\r\n      // Run the user's function with the input\r\n      const result = userFunction(input);\r\n\r\n      // Compare result with expected output\r\n      if (JSON.stringify(result).trim() === JSON.stringify(expectedOutput).trim()) {\r\n        toast.success(\"Congrats! Test Case Passed\");\r\n      } else {\r\n        toast.error(\"Oops! Output Didn't Match\");\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error during evaluation:\", error);\r\n      toast.error(\"Error during evaluation. Check console for details.\");\r\n    } finally {\r\n      setProcessing(false); // Stop processing after evaluation\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Split className=\"split\" minSize={0}>\r\n      <ProblemDescription details={details} />\r\n      <Split className=\"split-vertical\" direction=\"vertical\">\r\n        <CodeEditor onChange={onChange} />\r\n        <TestCases\r\n          handleCompile={handleCompile}\r\n          testcases={testcases}\r\n          processing={processing}\r\n        />\r\n      </Split>\r\n    </Split>\r\n  );\r\n}\r\n\r\nexport default Workspace;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}