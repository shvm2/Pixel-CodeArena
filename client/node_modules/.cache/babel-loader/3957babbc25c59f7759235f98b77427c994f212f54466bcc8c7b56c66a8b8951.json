{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\Downloads\\\\sheetcoder-master\\\\client\\\\src\\\\components\\\\CodingNavbar\\\\CodingNavbar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport \"./CodingNavbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodingNavbar = ({\n  contestTitle,\n  timeLimit\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [timeLeft, setTimeLeft] = useState(timeLimit * 60); // Initialize timeLeft in seconds\n\n  useEffect(() => {\n    // Retrieve the saved timer from local storage\n    const savedTimeLeft = localStorage.getItem(`timeLeft_${id}`);\n    const savedEndTime = localStorage.getItem(`endTime_${id}`);\n    const now = new Date();\n    if (savedTimeLeft && savedEndTime) {\n      const endTime = new Date(savedEndTime);\n      const remainingTime = Math.max((endTime - now) / 1000, 0); // Calculate remaining time\n      setTimeLeft(remainingTime);\n    } else {\n      // Calculate end time and store it\n      const endTime = new Date(now.getTime() + timeLimit * 60000);\n      localStorage.setItem(`endTime_${id}`, endTime.toISOString());\n      setTimeLeft(timeLimit * 60);\n    }\n\n    // Update the timer every second\n    const timer = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft <= 1) {\n          clearInterval(timer);\n          handleSubmit(); // Submit when time is up\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Save timer state to local storage\n    localStorage.setItem(`timeLeft_${id}`, timeLeft);\n    return () => {\n      clearInterval(timer);\n      localStorage.removeItem(`timeLeft_${id}`); // Cleanup on component unmount\n    };\n  }, [timeLeft, id, timeLimit, navigate]);\n  const handleSubmit = () => {\n    // Implement your submission logic here\n    console.log(\"Submitting code...\");\n    localStorage.setItem(`submitted_${id}`, 'true'); // Mark contest as given\n    navigate(`/contest/${id}/submit`); // Redirect to submit page\n  };\n\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"coding-navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contest-title\",\n      children: contestTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-left\",\n      children: [\"Time Left: \", formatTime(timeLeft)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit-button\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(CodingNavbar, \"QgFdsCHKf9HqYrjFCt4Uwjet8QQ=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = CodingNavbar;\nexport default CodingNavbar;\nvar _c;\n$RefreshReg$(_c, \"CodingNavbar\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","CodingNavbar","contestTitle","timeLimit","_s","navigate","id","timeLeft","setTimeLeft","savedTimeLeft","localStorage","getItem","savedEndTime","now","Date","endTime","remainingTime","Math","max","getTime","setItem","toISOString","timer","setInterval","prevTimeLeft","clearInterval","handleSubmit","removeItem","console","log","formatTime","seconds","minutes","floor","remainingSeconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shiva/Downloads/sheetcoder-master/client/src/components/CodingNavbar/CodingNavbar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport \"./CodingNavbar.css\";\r\n\r\nconst CodingNavbar = ({ contestTitle, timeLimit }) => {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const [timeLeft, setTimeLeft] = useState(timeLimit * 60); // Initialize timeLeft in seconds\r\n\r\n  useEffect(() => {\r\n    // Retrieve the saved timer from local storage\r\n    const savedTimeLeft = localStorage.getItem(`timeLeft_${id}`);\r\n    const savedEndTime = localStorage.getItem(`endTime_${id}`);\r\n    const now = new Date();\r\n\r\n    if (savedTimeLeft && savedEndTime) {\r\n      const endTime = new Date(savedEndTime);\r\n      const remainingTime = Math.max((endTime - now) / 1000, 0); // Calculate remaining time\r\n      setTimeLeft(remainingTime);\r\n    } else {\r\n      // Calculate end time and store it\r\n      const endTime = new Date(now.getTime() + timeLimit * 60000);\r\n      localStorage.setItem(`endTime_${id}`, endTime.toISOString());\r\n      setTimeLeft(timeLimit * 60);\r\n    }\r\n\r\n    // Update the timer every second\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prevTimeLeft) => {\r\n        if (prevTimeLeft <= 1) {\r\n          clearInterval(timer);\r\n          handleSubmit(); // Submit when time is up\r\n          return 0;\r\n        }\r\n        return prevTimeLeft - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    // Save timer state to local storage\r\n    localStorage.setItem(`timeLeft_${id}`, timeLeft);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n      localStorage.removeItem(`timeLeft_${id}`); // Cleanup on component unmount\r\n    };\r\n  }, [timeLeft, id, timeLimit, navigate]);\r\n\r\n  const handleSubmit = () => {\r\n    // Implement your submission logic here\r\n    console.log(\"Submitting code...\");\r\n    localStorage.setItem(`submitted_${id}`, 'true'); // Mark contest as given\r\n    navigate(`/contest/${id}/submit`); // Redirect to submit page\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\r\n  };\r\n\r\n  return (\r\n    <nav className=\"coding-navbar\">\r\n      <div className=\"contest-title\">{contestTitle}</div>\r\n      <div className=\"time-left\">Time Left: {formatTime(timeLeft)}</div>\r\n      <button onClick={handleSubmit} className=\"submit-button\">\r\n        Submit\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default CodingNavbar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}