{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\Downloads\\\\sheetcoder-master\\\\client\\\\src\\\\components\\\\CodingNavbar\\\\CodingNavbar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport \"./CodingNavbar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodingNavbar = ({\n  contestTitle,\n  timeLimit\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [timeLeft, setTimeLeft] = useState(timeLimit * 60); // Initialize timeLeft in seconds\n\n  useEffect(() => {\n    // Check for existing timer in local storage\n    const savedTimeLeft = localStorage.getItem(`timeLeft_${id}`);\n    if (savedTimeLeft) {\n      setTimeLeft(parseInt(savedTimeLeft, 10));\n    } else {\n      setTimeLeft(timeLimit * 60);\n    }\n\n    // Update the timer every second\n    const timer = setInterval(() => {\n      setTimeLeft(prevTimeLeft => {\n        if (prevTimeLeft <= 1) {\n          clearInterval(timer);\n          handleSubmit(); // Submit when time is up\n          return 0;\n        }\n        return prevTimeLeft - 1;\n      });\n    }, 1000);\n\n    // Save timer state to local storage\n    localStorage.setItem(`timeLeft_${id}`, timeLeft);\n    return () => {\n      clearInterval(timer);\n      localStorage.removeItem(`timeLeft_${id}`); // Cleanup on component unmount\n    };\n  }, [timeLeft, id, timeLimit]);\n  const handleSubmit = () => {\n    // Implement your submission logic here\n    console.log(\"Submitting code...\");\n    navigate(`/contest/${id}/submit`); // Redirect to submit page (you can modify this as needed)\n  };\n\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"coding-navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contest-title\",\n      children: contestTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-left\",\n      children: [\"Time Left: \", formatTime(timeLeft)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit-button\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(CodingNavbar, \"QgFdsCHKf9HqYrjFCt4Uwjet8QQ=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = CodingNavbar;\nexport default CodingNavbar;\nvar _c;\n$RefreshReg$(_c, \"CodingNavbar\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","CodingNavbar","contestTitle","timeLimit","_s","navigate","id","timeLeft","setTimeLeft","savedTimeLeft","localStorage","getItem","parseInt","timer","setInterval","prevTimeLeft","clearInterval","handleSubmit","setItem","removeItem","console","log","formatTime","seconds","minutes","Math","floor","remainingSeconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shiva/Downloads/sheetcoder-master/client/src/components/CodingNavbar/CodingNavbar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport \"./CodingNavbar.css\";\r\n\r\nconst CodingNavbar = ({ contestTitle, timeLimit }) => {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const [timeLeft, setTimeLeft] = useState(timeLimit * 60); // Initialize timeLeft in seconds\r\n\r\n  useEffect(() => {\r\n    // Check for existing timer in local storage\r\n    const savedTimeLeft = localStorage.getItem(`timeLeft_${id}`);\r\n    if (savedTimeLeft) {\r\n      setTimeLeft(parseInt(savedTimeLeft, 10));\r\n    } else {\r\n      setTimeLeft(timeLimit * 60);\r\n    }\r\n\r\n    // Update the timer every second\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prevTimeLeft) => {\r\n        if (prevTimeLeft <= 1) {\r\n          clearInterval(timer);\r\n          handleSubmit(); // Submit when time is up\r\n          return 0;\r\n        }\r\n        return prevTimeLeft - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    // Save timer state to local storage\r\n    localStorage.setItem(`timeLeft_${id}`, timeLeft);\r\n\r\n    return () => {\r\n      clearInterval(timer);\r\n      localStorage.removeItem(`timeLeft_${id}`); // Cleanup on component unmount\r\n    };\r\n  }, [timeLeft, id, timeLimit]);\r\n\r\n  const handleSubmit = () => {\r\n    // Implement your submission logic here\r\n    console.log(\"Submitting code...\");\r\n    navigate(`/contest/${id}/submit`); // Redirect to submit page (you can modify this as needed)\r\n  };\r\n\r\n  const formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    return `${minutes}:${remainingSeconds < 10 ? \"0\" : \"\"}${remainingSeconds}`;\r\n  };\r\n\r\n  return (\r\n    <nav className=\"coding-navbar\">\r\n      <div className=\"contest-title\">{contestTitle}</div>\r\n      <div className=\"time-left\">Time Left: {formatTime(timeLeft)}</div>\r\n      <button onClick={handleSubmit} className=\"submit-button\">\r\n        Submit\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default CodingNavbar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}