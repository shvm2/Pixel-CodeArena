{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Pixel-CodeArena\\\\client\\\\src\\\\components\\\\Workspace\\\\Workspace.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Split from \"react-split\";\nimport { toast } from \"react-toastify\";\nimport ProblemDescription from \"./ProblemDescription\";\nimport CodeEditor from \"./CodeEditor\";\nimport TestCases from \"./TestCases\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Workspace() {\n  _s();\n  const urlPathname = window.location.pathname;\n  const segments = urlPathname.split(\"/\");\n  const problemId = segments[segments.length - 1];\n  const [details, setDetails] = useState({});\n  const [code, setCode] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const [output, setOutput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [testResults, setTestResults] = useState([]);\n  const [testcases, setTestcases] = useState([]); // Fetch test cases dynamically\n\n  useEffect(() => {\n    async function fetchDetails() {\n      try {\n        const response = await axios.get(`http://localhost:6001/problem/${problemId}`);\n        setDetails(response.data);\n        setTestcases(response.data.testcases); // Set test cases from response\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchDetails();\n  }, [problemId]);\n  const onChange = data => {\n    setCode(data);\n  };\n  const handleCompile = async () => {\n    setProcessing(true);\n    try {\n      const allResults = [];\n      for (const testcase of testcases) {\n        const response = await axios.post(\"http://localhost:6001/get-code\", {\n          code\n        });\n        if (response.status === 200) {\n          const output = response.data.replace(\"Output: \", \"\").trim();\n          const isPassing = output === testcase.output.trim();\n          allResults.push({\n            input: testcase.input,\n            expected: testcase.output,\n            output,\n            isPassing\n          });\n        } else {\n          allResults.push({\n            input: testcase.input,\n            expected: testcase.output,\n            output: \"Execution failed\",\n            isPassing: false\n          });\n        }\n      }\n      setTestResults(allResults);\n      if (allResults.every(result => result.isPassing)) {\n        toast.success(\"All test cases passed!\");\n        setError(\"\");\n      } else {\n        toast.error(\"Some test cases failed.\");\n        setError(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error during execution:\", error);\n      setError(error.message || \"An unknown error occurred.\");\n      toast.error(\"Error during execution. Check console for details.\");\n    } finally {\n      setProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Split, {\n    className: \"split\",\n    minSize: 0,\n    children: [/*#__PURE__*/_jsxDEV(ProblemDescription, {\n      details: details\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Split, {\n      className: \"split-vertical\",\n      direction: \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TestCases, {\n        handleCompile: handleCompile,\n        testcases: testcases,\n        processing: processing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output-tab\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Test Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), testResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Input: \", result.input]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Expected Output: \", result.expected]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Output: \", result.output]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Status: \", result.isPassing ? \"Passed\" : \"Failed\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-tab\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(Workspace, \"r3Rgz0IBirEV6KEyQH2ubeiqbNY=\");\n_c = Workspace;\nexport default Workspace;\nvar _c;\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"names":["React","useState","useEffect","axios","Split","toast","ProblemDescription","CodeEditor","TestCases","jsxDEV","_jsxDEV","Workspace","_s","urlPathname","window","location","pathname","segments","split","problemId","length","details","setDetails","code","setCode","processing","setProcessing","output","setOutput","error","setError","testResults","setTestResults","testcases","setTestcases","fetchDetails","response","get","data","console","log","onChange","handleCompile","allResults","testcase","post","status","replace","trim","isPassing","push","input","expected","every","result","success","message","className","minSize","children","fileName","_jsxFileName","lineNumber","columnNumber","direction","map","index","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Pixel-CodeArena/client/src/components/Workspace/Workspace.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Split from \"react-split\";\r\nimport { toast } from \"react-toastify\";\r\nimport ProblemDescription from \"./ProblemDescription\";\r\nimport CodeEditor from \"./CodeEditor\";\r\nimport TestCases from \"./TestCases\";\r\n\r\nfunction Workspace() {\r\n  const urlPathname = window.location.pathname;\r\n  const segments = urlPathname.split(\"/\");\r\n  const problemId = segments[segments.length - 1];\r\n\r\n  const [details, setDetails] = useState({});\r\n  const [code, setCode] = useState(\"\");\r\n  const [processing, setProcessing] = useState(false);\r\n  const [output, setOutput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [testResults, setTestResults] = useState([]);\r\n  const [testcases, setTestcases] = useState([]); // Fetch test cases dynamically\r\n\r\n  useEffect(() => {\r\n    async function fetchDetails() {\r\n      try {\r\n        const response = await axios.get(`http://localhost:6001/problem/${problemId}`);\r\n        setDetails(response.data);\r\n        setTestcases(response.data.testcases); // Set test cases from response\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchDetails();\r\n  }, [problemId]);\r\n\r\n  const onChange = (data) => {\r\n    setCode(data);\r\n  };\r\n\r\n  const handleCompile = async () => {\r\n    setProcessing(true);\r\n\r\n    try {\r\n      const allResults = [];\r\n\r\n      for (const testcase of testcases) {\r\n        const response = await axios.post(\"http://localhost:6001/get-code\", {\r\n          code,\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const output = response.data.replace(\"Output: \", \"\").trim();\r\n\r\n          const isPassing = output === testcase.output.trim();\r\n          allResults.push({\r\n            input: testcase.input,\r\n            expected: testcase.output,\r\n            output,\r\n            isPassing,\r\n          });\r\n        } else {\r\n          allResults.push({\r\n            input: testcase.input,\r\n            expected: testcase.output,\r\n            output: \"Execution failed\",\r\n            isPassing: false,\r\n          });\r\n        }\r\n      }\r\n\r\n      setTestResults(allResults);\r\n\r\n      if (allResults.every((result) => result.isPassing)) {\r\n        toast.success(\"All test cases passed!\");\r\n        setError(\"\");\r\n      } else {\r\n        toast.error(\"Some test cases failed.\");\r\n        setError(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during execution:\", error);\r\n      setError(error.message || \"An unknown error occurred.\");\r\n      toast.error(\"Error during execution. Check console for details.\");\r\n    } finally {\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Split className=\"split\" minSize={0}>\r\n      <ProblemDescription details={details} />\r\n      <Split className=\"split-vertical\" direction=\"vertical\">\r\n        <CodeEditor onChange={onChange} />\r\n        <TestCases\r\n          handleCompile={handleCompile}\r\n          testcases={testcases}\r\n          processing={processing}\r\n        />\r\n        <div className=\"result-container\">\r\n          <div className=\"output-tab\">\r\n            <h3>Test Results</h3>\r\n            {testResults.map((result, index) => (\r\n              <div key={index}>\r\n                <p>Input: {result.input}</p>\r\n                <p>Expected Output: {result.expected}</p>\r\n                <p>Output: {result.output}</p>\r\n                <p>Status: {result.isPassing ? \"Passed\" : \"Failed\"}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"error-tab\">\r\n            <h3>Error</h3>\r\n            <pre>{error}</pre>\r\n          </div>\r\n        </div>\r\n      </Split>\r\n    </Split>\r\n  );\r\n}\r\n\r\nexport default Workspace;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}