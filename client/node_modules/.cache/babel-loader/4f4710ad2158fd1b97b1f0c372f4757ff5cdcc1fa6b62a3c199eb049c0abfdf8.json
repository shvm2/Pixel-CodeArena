{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Pixel-CodeArena\\\\client\\\\src\\\\components\\\\Workspace\\\\Workspace.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Split from \"react-split\";\nimport { toast } from \"react-toastify\";\nimport ProblemDescription from \"./ProblemDescription\";\nimport CodeEditor from \"./CodeEditor\";\nimport TestCases from \"./TestCases\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Workspace() {\n  _s();\n  const urlPathname = window.location.pathname;\n  const segments = urlPathname.split(\"/\");\n  const problemId = segments[segments.length - 1];\n  const [details, setDetails] = useState({});\n  const [code, setCode] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  const [output, setOutput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const testcases = details.testcases;\n  useEffect(() => {\n    async function fetchDetails() {\n      try {\n        const response = await axios.get('http://localhost:6001/problem/${problemId}');\n        setDetails(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchDetails();\n  }, [problemId]);\n  const onChange = data => {\n    setCode(data);\n  };\n  const handleCompile = () => {\n    setProcessing(true);\n    setError(\"\"); // Reset error before new compile\n    setOutput(\"\"); // Reset output before new compile\n\n    try {\n      // Example input and expected output\n      const input = [1, 2, 3]; // Modify as needed\n      const expectedOutput = \"0,1\"; // Modify as needed\n\n      const target = 3;\n\n      // Create a new function from the user's code\n      const userFunction = new Function('nums', 'target', `\n        ${code}\n      `);\n\n      // Execute the user's function\n      const result = userFunction(input, target);\n\n      // Process the result\n      let resultString;\n      if (Array.isArray(result)) {\n        resultString = result.join(',');\n      } else {\n        resultString = result ? result.toString() : '';\n      }\n\n      // Compare result with expected output\n      if (JSON.stringify(resultString).trim() === JSON.stringify(expectedOutput).trim()) {\n        toast.success(\"Congrats! Test Case Passed\");\n        setOutput(resultString);\n      } else {\n        toast.error(\"Oops! Output Didn't Match\");\n        setOutput(resultString);\n      }\n    } catch (error) {\n      // Catch and handle any error during function execution\n      console.error(\"Error during evaluation:\", error);\n      setError(error.message || \"An unknown error occurred.\"); // Set error message\n      toast.error(\"Error during evaluation. Check console for details.\");\n    } finally {\n      setProcessing(false); // Stop processing after evaluation\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Split, {\n    className: \"split\",\n    minSize: 0,\n    children: [/*#__PURE__*/_jsxDEV(ProblemDescription, {\n      details: details\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Split, {\n      className: \"split-vertical\",\n      direction: \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TestCases, {\n        handleCompile: handleCompile,\n        testcases: testcases,\n        processing: processing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"output-tab\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: output\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-tab\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(Workspace, \"7SOQjYudOaxMqih9bzICX1qz0GU=\");\n_c = Workspace;\nexport default Workspace;\nvar _c;\n$RefreshReg$(_c, \"Workspace\");","map":{"version":3,"names":["React","useState","useEffect","axios","Split","toast","ProblemDescription","CodeEditor","TestCases","jsxDEV","_jsxDEV","Workspace","_s","urlPathname","window","location","pathname","segments","split","problemId","length","details","setDetails","code","setCode","processing","setProcessing","output","setOutput","error","setError","testcases","fetchDetails","response","get","data","console","log","onChange","handleCompile","input","expectedOutput","target","userFunction","Function","result","resultString","Array","isArray","join","toString","JSON","stringify","trim","success","message","className","minSize","children","fileName","_jsxFileName","lineNumber","columnNumber","direction","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Pixel-CodeArena/client/src/components/Workspace/Workspace.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Split from \"react-split\";\r\nimport { toast } from \"react-toastify\";\r\nimport ProblemDescription from \"./ProblemDescription\";\r\nimport CodeEditor from \"./CodeEditor\";\r\nimport TestCases from \"./TestCases\";\r\n\r\nfunction Workspace() {\r\n  const urlPathname = window.location.pathname;\r\n  const segments = urlPathname.split(\"/\");\r\n  const problemId = segments[segments.length - 1];\r\n\r\n  const [details, setDetails] = useState({});\r\n  const [code, setCode] = useState(\"\");\r\n  const [processing, setProcessing] = useState(false);\r\n  const [output, setOutput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  \r\n  const testcases = details.testcases;\r\n\r\n  useEffect(() => {\r\n    async function fetchDetails() {\r\n      try {\r\n        const response = await axios.get(\r\n          'http://localhost:6001/problem/${problemId}'\r\n        );\r\n        setDetails(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchDetails();\r\n  }, [problemId]);\r\n\r\n  const onChange = (data) => {\r\n    setCode(data);\r\n  };\r\n\r\n  const handleCompile = () => {\r\n    setProcessing(true);\r\n    setError(\"\"); // Reset error before new compile\r\n    setOutput(\"\"); // Reset output before new compile\r\n  \r\n    try {\r\n      // Example input and expected output\r\n      const input = [1, 2, 3]; // Modify as needed\r\n      const expectedOutput = \"0,1\"; // Modify as needed\r\n  \r\n      const target = 3;\r\n  \r\n      // Create a new function from the user's code\r\n      const userFunction = new Function('nums', 'target', `\r\n        ${code}\r\n      `);\r\n  \r\n      // Execute the user's function\r\n      const result = userFunction(input, target);\r\n  \r\n      // Process the result\r\n      let resultString;\r\n      if (Array.isArray(result)) {\r\n        resultString = result.join(',');\r\n      } else {\r\n        resultString = result ? result.toString() : '';\r\n      }\r\n  \r\n      // Compare result with expected output\r\n      if (JSON.stringify(resultString).trim() === JSON.stringify(expectedOutput).trim()) {\r\n        toast.success(\"Congrats! Test Case Passed\");\r\n        setOutput(resultString);\r\n      } else {\r\n        toast.error(\"Oops! Output Didn't Match\");\r\n        setOutput(resultString);\r\n      }\r\n  \r\n    } catch (error) {\r\n      // Catch and handle any error during function execution\r\n      console.error(\"Error during evaluation:\", error);\r\n      setError(error.message || \"An unknown error occurred.\"); // Set error message\r\n      toast.error(\"Error during evaluation. Check console for details.\");\r\n    } finally {\r\n      setProcessing(false); // Stop processing after evaluation\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Split className=\"split\" minSize={0}>\r\n      <ProblemDescription details={details} />\r\n      <Split className=\"split-vertical\" direction=\"vertical\">\r\n        <CodeEditor onChange={onChange} />\r\n        <TestCases\r\n          handleCompile={handleCompile}\r\n          testcases={testcases}\r\n          processing={processing}\r\n        />\r\n        <div className=\"result-container\">\r\n          <div className=\"output-tab\">\r\n            <h3>Output</h3>\r\n            <pre>{output}</pre>\r\n          </div>\r\n          <div className=\"error-tab\">\r\n            <h3>Error</h3>\r\n            <pre>{error}</pre>\r\n          </div>\r\n        </div>\r\n      </Split>\r\n    </Split>\r\n  );\r\n}\r\n\r\nexport default Workspace;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}